TRANSMITTER CODE:

#include <RH_RF95.h> 
#include <SPI.h> 
#define RFM95_CS 10 
#define RFM95_RST 9 
#define RFM95_INT 2 
#define TRIGGER_PIN 3 // Pin connected to the trigger pin of ultrasonic sensor 
#define ECHO_PIN 4 // Pin connected to the echo pin of ultrasonic sensor 
RH_RF95 rf95(RFM95_CS, RFM95_INT); 
void setup() { 
Serial.begin(9600); 
while (!Serial); 
pinMode(RFM95_RST, OUTPUT); 
digitalWrite(RFM95_RST, HIGH); 
pinMode(TRIGGER_PIN, OUTPUT); 
pinMode(ECHO_PIN, INPUT); 
if (!rf95.init()) { 
Serial.println("LoRa initialization failed!"); 
while (1); 
} 
Serial.println("LoRa initialized successfully!" 
void loop() 
{  
digitalWrite(TRIGGER_PIN, LOW);  
delayMicroseconds(2);
digitalWrite(TRIGGER_PIN, HIGH); 
delayMicroseconds(10); 
digitalWrite(TRIGGER_PIN, LOW); 
duration = pulseIn(ECHO_PIN, HIGH); 
// Calculate distance in centimeters 
distance = duration * 0.034 / 2;  
int maxDistance = 100; // Maximum distance in cm (when water tank is empty) 
int waterLevelPercentage = map(distance, 0, maxDistance, 100, 0); 
waterLevelPercentage = constrain(waterLevelPercentage, 0, 100); // Ensure percentage stays within  0-100 range 
// Print water level percentage 
Serial.print("Water Level Percentage: "); 
Serial.print(waterLevelPercentage); 
Serial.println("%"); 
String message = "Water Level: " + String(waterLevelPercentage) + "%"; 
uint8_t buf[message.length() + 1]; 
message.getBytes(buf, message.length() + 1); 
// Send message via LoRa 
rf95.send(buf, sizeof(buf)) 
rf95.waitPacketSent(); 
delay(1000); // Adjust delay as needed 
}

This Arduino program measures the water level using an ultrasonic sensor and converts it to a percentage. It 
sets up LoRa connectivity and sends this data wirelessly on a constant basis. It measures distance, computes a 
percentage, composes a message, transmits it via LoRa, and then repeats the procedure with a one-second pause. 
The setup function sets up pin settings and initializes the LoRa module. The mapping of the water level 
% makes sure that it remains between 0 and 100. This small code makes it easy to monitor water levels remotely, 
which is perfect for applications like reservoirs or tanks where real-time data transfer is essential forcontrol and 
monitor

RECEIVER CODE:

#include <RH_RF95.h> 
#include <SPI.h> 
#define RFM95_CS 10 
#define RFM95_RST 9 
#define RFM95_INT 2 
#define RELAY_PIN 5   // Pin connected to the relay control pin 
#define Motor_PIN 6   // Pin connected to the Motor 
#define sensorTA12 A0 // Analog input pin that sensor is attached to 
RH_RF95 rf95(RFM95_CS, RFM95_INT); 
bool isMotorOn = false; // Flag to track Motor status 
int q; 
void setup() { 
pinMode(RELAY_PIN, OUTPUT); 
pinMode(Motor_PIN, OUTPUT); 
digitalWrite(RELAY_PIN, LOW); // Initially turn off relay 
digitalWrite(Motor_PIN, LOW);  // Initially turn off Motor 
Serial.begin(9600); 
while (!Serial); 
pinMode(RFM95_RST, OUTPUT); 
digitalWrite(RFM95_RST, HIGH); 
if (!rf95.init()) { 
Serial.println("LoRa initialization failed!"); 
while (1); 
} 
Serial.println("LoRa initialized successfully!"); 
pinMode(sensorTA12, INPUT); 
} 
void loop() { 
processLoRaMessage(); 
readAndPrintCurrentData(); 
} 
void processLoRaMessage() { 
if (rf95.available()) { 
uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; 
uint8_t len = sizeof(buf); 
if (rf95.recv(buf, &len)) { 
Serial.print("Received Message: "); 
Serial.println((char*)buf); 
if (len >= 14) { 
// Check if the message starts with "Water Level: " 
if (strncmp((char*)buf, "Water Level: ", 13) == 0) { 
int waterLevel = atoi((char*)buf + 13); 
if (waterLevel < 10) { 
digitalWrite(RELAY_PIN, HIGH); // Turn on relay 
digitalWrite(Motor_PIN, HIGH); // Turn on Motor 
isMotorOn = true; 
q=1; 
if (getVPP() < 0.0001) 
{ 
digitalWrite(RELAY_PIN, HIGH); // Turn off relay 
digitalWrite(Motor_PIN, HIGH);  // Turn off Motor 
isMotorOn = false; 
} 
if (getVPP() >= 0.014 && getVPP() <= 0.021) 
{ 
digitalWrite(RELAY_PIN, LOW); // Turn off relay 
digitalWrite(Motor_PIN, LOW);  // Turn off Motor 
          isMotorOn = false; 
             Serial.print(" Motor Off dry run"); 
          delay(5000);  
           } 
 
          else if (getVPP() >= 0.022 && getVPP() <= 0.080) 
          { 
           digitalWrite(RELAY_PIN, HIGH); // Turn off relay 
          digitalWrite(Motor_PIN, HIGH);  // Turn off Motor 
          isMotorOn = false; 
           Serial.print(" Motor On water in sump "); 
          } 
 
 
          } else if (waterLevel > 90) { 
            digitalWrite(RELAY_PIN, LOW); // Turn off relay 
            digitalWrite(Motor_PIN, LOW);  // Turn off Motor 
            isMotorOn = false; 
            q=0; 
          } 
        } 
      } 
  void readAndPrintCurrentData() { 
  float nVPP = getVPP(); 
  float nCurrThruResistorPP = (nVPP / 200.0) * 1000.0; 
  float nCurrThruResistorRMS = nCurrThruResistorPP * 0.707; 
               float nCurrentThruWire =  nCurrThruResistorRMS * 1000; 
 
  Serial.print("Volts Peak : "); 
  Serial.println(nVPP, 3); 
 
  Serial.print("Current Through Wire : "); 
  Serial.print(nCurrentThruWire, 3); 
  Serial.println(" mA RMS"); 
Serial.println(); 
} 
float getVPP() { 
float result; 
int readValue;    // value read from the sensor 
int maxValue = 0; // store max value here 
uint32_t start_time = millis(); 
while ((millis() - start_time) < 600) // sample for 1 Sec 
{ 
readValue = analogRead(sensorTA12); 
if (readValue > maxValue) { 
maxValue = readValue; 
} 
} 
result = (maxValue * 5.0) / 1024.0; 
return result; 
} 
 
This code integrates a ZHT103 current sensor to detect dry run conditions in a motor. It communicates with an 
RFM95 LoRa module to receive water level data. Upon receiving data, it displays it on an SSD1306 OLED 
screen and controls the motor and relay based on water levels. The current sensor monitors motor current, and 
if it falls below a threshold while the motor is on, indicating a dry run, it turns off the motor and relay. 
Adjustments to the threshold are needed for accurate detection. Overall, it safeguards the motor from damage 
due to running without water.
